// 整数二分

// 区间 [l, r] 划分为 [l, mid]和[mid + 1, r]时使用：
binary_search(vector<int> q, int target){
    int left = 0, right = q.size() - 1;
    while(left < right){
      int mid = left + right >> 1;
      if(check(mid)) right = mid;
      else left = mid + 1;
    }
    return left;
}

// 区间 [l, r] 划分为 [l, mid - 1] 和 [mid, r]时使用：
binary_search(vector<int> q, int target){
    int left = 0, right = q.size() - 1;
    while(left < right){
      int mid = left + right + 1 >> 1;
      if(check(mid)) left = mid;
      else right = mid - 1;
    }
    
    return left;
}



// 浮点数二分
binary_search(vector<double> q, double target){
    int left = 0, right = q.size() - 1;
    while(left < right){
        int mid = left + right >> 1;
        if(check(mid)) left = mid;
        else right = mid - 1;
    }
}



